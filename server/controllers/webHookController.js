import axios from "axios";
import { analyze } from "./analyzeController.js";
import { pushPR } from "./pushPRController.js";

export const webHook = async (req, res) => {
    try {
        const eventType = req.headers['x-github-event'];
        console.log('Webhook event type:', eventType);

        if (eventType === 'push') {
            console.log('Processing push event');
            const payload = req.body;
            console.log('Received webhook payload:', payload);

            // Extract repository information
            const repo = payload.repository.name;
            const owner = payload.repository.owner.login;
            const branch = payload.ref.split('/').pop();
            const commitId = payload.after;
            const repoLanguage = payload.repository.language.toLowerCase();

            console.log('Extracted values:', {
                repo,
                commitId,
                owner,
                branch,
                repoLanguage
            });

            // Generate sample issues for demonstration
            const sampleIssues = [
                {
                    type: "security",
                    severity: "high",
                    description: "Potential SQL injection vulnerability in database queries",
                    impact: "Could lead to unauthorized data access or manipulation",
                    file: "src/database/queries.js",
                    line: "45-50",
                    suggestion: "Use parameterized queries instead of string concatenation",
                    example: "// Before: query = `SELECT * FROM users WHERE id = ${userId}`\n// After: query = 'SELECT * FROM users WHERE id = ?'"
                },
                {
                    type: "performance",
                    severity: "medium",
                    description: "Inefficient loop in data processing",
                    impact: "Could cause performance issues with large datasets",
                    file: "src/utils/processor.js",
                    line: "78-85",
                    suggestion: "Use array methods like map/filter instead of forEach",
                    example: "// Before: items.forEach(item => { result.push(transform(item)) })\n// After: const result = items.map(transform)"
                },
                {
                    type: "errorHandling",
                    severity: "high",
                    description: "Missing error handling in API calls",
                    impact: "Unhandled errors could crash the application",
                    file: "src/api/client.js",
                    line: "120-125",
                    suggestion: "Add try-catch blocks and proper error handling",
                    example: "try {\n  const response = await api.get('/endpoint')\n} catch (error) {\n  handleError(error)\n}"
                }
            ];

            console.log('Generated sample issues:', sampleIssues);

            // Create PR with fixes
            try {
                const pr = await pushPR({
                    body: {
                        repo: `${owner}/${repo}`,
                        branch,
                        title: "[Scriptocol] Automated fixes",
                        body: `This PR contains automated fixes generated by Scriptocol.\n\nNumber of fixes: ${sampleIssues.length}`,
                        files: sampleIssues.map(issue => ({
                            path: issue.file,
                            content: issue.example
                        }))
                    }
                }, res);

                console.log('PR created successfully:', pr);

                return res.json({
                    message: `Found ${sampleIssues.length} issues to fix`,
                    issues: sampleIssues,
                    pr: pr,
                    status: 'success'
                });
            } catch (prError) {
                console.error('Error creating PR:', prError);
                return res.json({
                    message: `Found ${sampleIssues.length} issues but PR creation failed`,
                    issues: sampleIssues,
                    error: prError.message,
                    status: 'partial_success'
                });
            }
        } else {
            console.log('Ignoring non-push event:', eventType);
            return res.json({ message: 'Ignoring non-push event' });
        }
    } catch (error) {
        console.error('Error in webhook:', error);
        return res.status(500).json({
            message: 'Error processing webhook',
            error: error.message
        });
    }
};

// Function to detect repository language
async function detectLanguage(owner, repo, branch) {
    try {
        console.log('Detecting language for:', `${owner}/${repo}`);
        
        if (!process.env.PAT_TOKEN) {
            throw new Error('PAT_TOKEN environment variable is not set. Please configure it in your environment settings.');
        }

        const response = await axios.get(
            `https://api.github.com/repos/${owner}/${repo}/contents`,
            {
                headers: {
                    Authorization: `Bearer ${process.env.PAT_TOKEN}`,
                    Accept: 'application/vnd.github.v3+json'
                },
                params: {
                    ref: branch
                }
            }
        );

        console.log('Repository contents:', response.data.map(file => file.name));

        const files = response.data;
        if (files.some(file => file.name === 'package.json')) return 'js';
        if (files.some(file => file.name === 'requirements.txt')) return 'python';
        if (files.some(file => file.name === 'go.mod')) return 'go';
        
        // If no language-specific files found, try to detect from file extensions
        const extensions = new Set(files.map(file => file.name.split('.').pop().toLowerCase()));
        if (extensions.has('js') || extensions.has('jsx') || extensions.has('ts') || extensions.has('tsx')) return 'js';
        if (extensions.has('py')) return 'python';
        if (extensions.has('go')) return 'go';
        
        throw new Error('Unsupported language - No language-specific files or extensions found');
    } catch (error) {
        console.error('Error detecting language:', error);
        throw error;
    }
}
